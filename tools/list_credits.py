import os
import re
from pathlib import Path

ROOT_DIR = Path(__file__).resolve().parents[1]
ROLE_LABELS = {
    "idea": "Suggestor",
    "art": "Artist",
    "code": "Coder",
}
STRING_PATTERN = re.compile(r"['\"]([^'\"]+)['\"]")
EXCLUDED_NAMES = {"Unknown", "Anonymous"}


def extract_brace_block(text: str, start_index: int):
    brace_start = text.find("{", start_index)
    if brace_start == -1:
        return None, start_index
    depth = 0
    i = brace_start
    while i < len(text):
        ch = text[i]
        if ch == "{":
            depth += 1
        elif ch == "}":
            depth -= 1
            if depth == 0:
                return text[brace_start + 1 : i], i + 1
        i += 1
    return None, start_index


def main():
    role_sets = {role: set() for role in ROLE_LABELS}
    for dirpath, _, filenames in os.walk(ROOT_DIR):
        for filename in filenames:
            if not filename.endswith(".lua"):
                continue
            path = Path(dirpath) / filename
            try:
                with open(path, "r", encoding="utf-8") as fp:
                    content = fp.read()
            except UnicodeDecodeError:
                with open(path, "r", encoding="latin-1") as fp:
                    content = fp.read()
            search_pos = 0
            while True:
                idx = content.find("crp_credits", search_pos)
                if idx == -1:
                    break
                block, new_index = extract_brace_block(content, idx)
                if block is None:
                    search_pos = idx + 1
                    continue
                for role in role_sets:
                    role_block, _ = extract_brace_block(block, block.find(f"{role} =")) if f"{role} =" in block else (None, None)
                    if role_block:
                        role_sets[role].update(
                            name.strip()
                            for name in STRING_PATTERN.findall(role_block)
                            if name.strip() and name.strip() not in EXCLUDED_NAMES
                        )
                search_pos = new_index
    sorted_names = {role: sorted(names, key=str.lower) for role, names in role_sets.items()}
    output_path = ROOT_DIR / "tools" / "output.lua"
    output_path.parent.mkdir(parents=True, exist_ok=True)
    with open(output_path, "w", encoding="utf-8") as fp:
        fp.write("-- auto-generated by tools/list_credits.py\n")
        fp.write("return {\n")
        for role in ["idea", "art", "code"]:
            key = ROLE_LABELS[role].lower() + "s"
            fp.write(f"    {key} = {{\n")
            for name in sorted_names[role]:
                fp.write(f"        \"{name}\",\n")
            fp.write("    },\n")
        fp.write("}\n")

    for role in ["idea", "art", "code"]:
        header = f"=== {ROLE_LABELS[role].upper()}S ==="
        print(header)
        for name in sorted_names[role]:
            print(name)
        print()


if __name__ == "__main__":
    main()